<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	
	<http pattern="/resources/**" security="none" />

	<!-- <http auto-config="true" use-expressions="true">
		<intercept-url pattern="/**" access="hasRole('store-tab')" />
		<intercept-url pattern="/" access="permitAll" />
		<intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/" access="permitAll" /> 
		<logout invalidate-session="true" logout-success-url="/start"
			logout-url="/logout" />
		<http-basic />
	</http>

	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user authorities="ROLE_ADMIN,ROLE_USER" name="services" password="welcome1" />
				<user authorities="ROLE_ADMIN,ROLE_USER" name="user" password="welcome1" />
			</user-service>
			<password-encoder hash="sha" />
			<jdbc-user-service data-source-ref="dataSource"
		   		users-by-username-query="select username, password, active from employee where username=?" 
 				authorities-by-username-query="select u.username, ur.role_tab from employee u, employee_role ur where u.id = ur.employee_id and u.username =?"/> 
		</authentication-provider>
	</authentication-manager> -->
	<beans:bean id="ajaxTimeoutRedirectFilter" class="com.services.core.security.AjaxTimeoutRedirectFilter">
	    <beans:property name="customSessionExpiredErrorCode" value="901"/>
	</beans:bean>
	<http auto-config="false" use-expressions="true" entry-point-ref="loginUrlAuthenticationEntryPoint">
		<intercept-url pattern="/login" access="permitAll" />
		<intercept-url pattern="/logout" access="permitAll" />
		<intercept-url pattern="/**" access="isAuthenticated()" />
 		<access-denied-handler error-page="/login" />
		<logout invalidate-session="true" logout-success-url="/login" logout-url="/logout"/>
		<custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER"/>
		<custom-filter ref="ajaxTimeoutRedirectFilter" after="EXCEPTION_TRANSLATION_FILTER"/>
	</http>
	
	<beans:bean id="loginUrlAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login" />
	</beans:bean>
 
	<beans:bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="filterProcessesUrl" value="/service/j_spring_security_check" />
		<beans:property name="authenticationFailureHandler" ref="securityLoginFailureHandler" />
		<beans:property name="authenticationSuccessHandler" ref="securityLoginSuccessHandler" />
	</beans:bean>
 
	<beans:bean id="securityLoginSuccessHandler" class="com.services.core.security.SecurityLoginSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/start" />
	</beans:bean>
 
	<beans:bean id="securityLoginFailureHandler" class="com.services.core.security.SecurityLoginFailureHandler" >
		<beans:property name="defaultFailureUrl" value="/failure" />
	</beans:bean>
 
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="customUserDetailsService">
			<password-encoder hash="sha" />
		</authentication-provider>
	</authentication-manager>
	

</beans:beans>